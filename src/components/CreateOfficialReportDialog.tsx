import { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { FileText, Send } from "lucide-react";

interface CreateOfficialReportDialogProps {
  children: React.ReactNode;
}

export const CreateOfficialReportDialog = ({ children }: CreateOfficialReportDialogProps) => {
  const { user } = useAuth();
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    title: "",
    report_type: "",
    content: "",
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;

    setLoading(true);
    try {
      // Create the report in the database
      const { error } = await supabase
        .from('reports')
        .insert({
          title: formData.title,
          report_type: formData.report_type,
          content: formData.content,
          generated_by: user.id,
          is_final: false,
        });

      if (error) throw error;

      // Log the activity
      await supabase
        .from('case_activities')
        .insert({
          activity_type: 'REPORT_GENERATED',
          description: `Official report "${formData.title}" generated by OCU`,
          user_id: user.id,
          metadata: {
            report_type: formData.report_type,
            report_title: formData.title
          }
        });

      toast.success("Official report created successfully");
      setFormData({ title: "", report_type: "", content: "" });
      setOpen(false);
    } catch (error: any) {
      console.error('Error creating report:', error);
      toast.error("Failed to create report: " + error.message);
    } finally {
      setLoading(false);
    }
  };

  const reportTypes = [
    { value: "weekly_departmental", label: "Weekly Departmental Report" },
    { value: "monthly_performance", label: "Monthly Performance Report" },
    { value: "case_summary", label: "Case Summary Report" },
    { value: "exhibit_status", label: "Exhibit Status Report" },
    { value: "team_productivity", label: "Team Productivity Report" },
    { value: "operational_update", label: "Operational Update" },
    { value: "incident_report", label: "Incident Report" },
    { value: "resource_request", label: "Resource Request" },
  ];

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {children}
      </DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Create Official Report for Commanding Officer
          </DialogTitle>
          <DialogDescription>
            Generate an official departmental report to update the Commanding Officer on unit activities and status.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid gap-4">
            <div className="space-y-2">
              <Label htmlFor="title">Report Title</Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                placeholder="Enter report title..."
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="report_type">Report Type</Label>
              <Select
                value={formData.report_type}
                onValueChange={(value) => setFormData(prev => ({ ...prev, report_type: value }))}
                required
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select report type" />
                </SelectTrigger>
                <SelectContent>
                  {reportTypes.map((type) => (
                    <SelectItem key={type.value} value={type.value}>
                      {type.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="content">Report Content</Label>
              <Textarea
                id="content"
                value={formData.content}
                onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}
                placeholder="Enter detailed report content, including:
• Current case status and updates
• Exhibit processing progress
• Team performance metrics
• Resource requirements
• Operational challenges and solutions
• Recommendations and next steps..."
                rows={12}
                className="resize-none"
                required
              />
            </div>
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? (
                "Creating Report..."
              ) : (
                <>
                  <Send className="h-4 w-4 mr-2" />
                  Create Official Report
                </>
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};