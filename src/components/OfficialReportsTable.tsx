import { useState, useEffect } from "react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { useRealtime } from "@/hooks/useRealtime";
import { FileText, Eye, Calendar, User } from "lucide-react";
import { format } from "date-fns";

interface Report {
  id: string;
  title: string;
  report_type: string;
  content: string;
  is_final: boolean;
  created_at: string;
  updated_at: string;
  generated_by: string;
  reviewed_by?: string;
  case_id?: string;
  exhibit_id?: string;
  file_path?: string;
  generator_profile?: {
    full_name: string;
    badge_number: string;
  };
  reviewer_profile?: {
    full_name: string;
    badge_number: string;
  };
}

export const OfficialReportsTable = () => {
  const { user, profile } = useAuth();
  const [reports, setReports] = useState<Report[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedReport, setSelectedReport] = useState<Report | null>(null);

  const fetchReports = async () => {
    try {
      let query = supabase
        .from('reports')
        .select('*')
        .order('created_at', { ascending: false });

      // If user is OCU, show reports they generated
      // If user is CO, show all reports for review
      if (profile?.role === 'officer_commanding_unit') {
        query = query.eq('generated_by', user?.id);
      }

      const { data: reportsData, error } = await query;
      if (error) throw error;

      // Fetch user profiles for generators
      const userIds = [...new Set(reportsData?.map(r => r.generated_by).filter(Boolean) || [])];
      
      const { data: profilesData } = await supabase
        .from('profiles')
        .select('id, full_name, badge_number')
        .in('id', userIds);

      // Map profiles to reports
      const reportsWithProfiles = reportsData?.map(report => {
        const generator = profilesData?.find(p => p.id === report.generated_by);
        return {
          ...report,
          generator_profile: generator ? {
            full_name: generator.full_name,
            badge_number: generator.badge_number
          } : undefined
        };
      }) || [];

      setReports(reportsWithProfiles);
    } catch (error) {
      console.error('Error fetching reports:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchReports();
  }, [user, profile]);

  useRealtime('reports', fetchReports);

  const getReportTypeLabel = (type: string) => {
    const types: Record<string, string> = {
      weekly_departmental: "Weekly Departmental",
      monthly_performance: "Monthly Performance",
      case_summary: "Case Summary",
      exhibit_status: "Exhibit Status",
      team_productivity: "Team Productivity",
      operational_update: "Operational Update",
      incident_report: "Incident Report",
      resource_request: "Resource Request",
    };
    return types[type] || type;
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center">Loading reports...</div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Official Reports
            {profile?.role === 'officer_commanding_unit' && " (Generated by You)"}
            {profile?.role === 'commanding_officer' && " (For Review)"}
          </CardTitle>
        </CardHeader>
        <CardContent>
          {reports.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <p>No official reports found</p>
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Title</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Generated By</TableHead>
                  <TableHead>Created</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {reports.map((report) => (
                  <TableRow key={report.id}>
                    <TableCell className="font-medium">{report.title}</TableCell>
                    <TableCell>
                      <Badge variant="outline">
                        {getReportTypeLabel(report.report_type)}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4" />
                        <div>
                          <p className="font-medium">{report.generator_profile?.full_name || 'Unknown User'}</p>
                          <p className="text-sm text-muted-foreground">
                            Badge: {report.generator_profile?.badge_number || 'N/A'}
                          </p>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4" />
                        {format(new Date(report.created_at), 'MMM dd, yyyy HH:mm')}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant={report.is_final ? "default" : "secondary"}>
                        {report.is_final ? "Final" : "Draft"}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setSelectedReport(report)}
                      >
                        <Eye className="h-4 w-4 mr-2" />
                        View
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>

      {/* Report Viewer Modal */}
      {selectedReport && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-background rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="p-6 border-b">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold">{selectedReport.title}</h2>
                  <div className="flex items-center gap-4 mt-2 text-sm text-muted-foreground">
                    <span>Type: {getReportTypeLabel(selectedReport.report_type)}</span>
                    <span>•</span>
                    <span>Generated: {format(new Date(selectedReport.created_at), 'MMM dd, yyyy HH:mm')}</span>
                    <span>•</span>
                    <span>By: {selectedReport.generator_profile?.full_name || 'Unknown User'}</span>
                  </div>
                </div>
                <Button variant="outline" onClick={() => setSelectedReport(null)}>
                  Close
                </Button>
              </div>
            </div>
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
              <div className="prose prose-sm max-w-none">
                <pre className="whitespace-pre-wrap font-sans leading-relaxed">
                  {selectedReport.content}
                </pre>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};